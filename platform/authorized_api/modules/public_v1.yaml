swagger: '2.0'

info:
  version: auto
  title: Modules API

paths:
  /api/modules/v1:
    get:
      summary: Modules list
      description: List of licensed modules with access for a current user
      operationId: list_modules_v1
      produces:
        - application/vnd.api+json
      responses:
        200:
          description: OK
          schema:
            type: object
            required:
              - data
            properties:
              data:
                type: array
                items:
                  type: object
                  required:
                    - id
                    - type
                  properties:
                    id:
                      $ref: '#/definitions/ModuleId'
                    type:
                      type: string
                      enum: [module]
            example:
              {
                "data": [
                {
                  "id": "analytics",
                  "type": "module"
                },
                {
                  "id": "tag_manager",
                  "type": "module"
                }
                ]
              }
  /api/modules/v1/by-users:
    post:
      summary: Modules list for given users
      description: List of modules with access for a list of users
      operationId: accessible_modules_for_users_batch
      consumes:
        - application/vnd.api+json
      produces:
        - application/vnd.api+json
      parameters:
        - name: payload
          description: list of users
          in: body
          schema:
            type: object
            required:
              - data
            properties:
              data:
                type: array
                maxItems: 100
                items:
                  $ref: '#/definitions/UserIdentifier'

      responses:
        200:
          description: OK
          schema:
            type: object
            required:
              - data
            properties:
              data:
                type: array
                maxItems: 100
                items:
                  type: object
                  required:
                    - type
                    - id
                    - attributes
                  properties:
                    type:
                      type: string
                      enum: [ppms/user/modules]
                    id:
                      $ref: '#/definitions/Id'
                    attributes:
                      type: object
                      required:
                        - modules
                      properties:
                        modules:
                          type: array
                          items:
                            $ref: '#/definitions/ModuleId'
        400:
          description: Bad request
          schema:
            type: object
            required:
              - errors
            properties:
              errors:
                type: array
                items:
                  $ref: '#/definitions/ErrorObject'
            example:
              {
                "errors": [
                {
                  "status": "400",
                  "code": "error.default",
                  "title": "Invalid form",
                  "detail": "This collection should contain 100 elements or less.",
                  "source": {
                    "pointer": "/data"
                  }
                }
                ]
              }
  /api/modules/v1/{module}:
    get:
      summary: Module
      description: Returns module if it is licensed and user has access to it
      operationId: get_module_v1
      produces:
        - application/vnd.api+json
      parameters:
        - $ref: '#/parameters/Module'
      responses:
        200:
          description: OK
          schema:
            type: object
            required:
              - data
            properties:
              data:
                type: object
                required:
                  - id
                  - type
                properties:
                  id:
                    $ref: '#/definitions/ModuleId'
                  type:
                    type: string
                    enum: [module]
        401:
          $ref: '#/responses/UnauthorizedError'
        403:
          $ref: '#/responses/ForbiddenError'
        404:
          $ref: '#/responses/NotFoundModule'
  /api/modules/v1/access/user/{user_id}:
    get:
      summary: Modules access list for a given user
      description: |
        Lists all modules to which a given user has access to.
        List contains both explicit access for a user and implicit access inherited from user groups which user belongs to.
      operationId: get_user_modules_access_v1
      produces:
        - application/vnd.api+json
      parameters:
        - $ref: '#/parameters/UserId'
      responses:
        200:
          description: OK
          schema:
            type: object
            required:
              - data
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/ModulesAccessForUser'
        401:
          $ref: '#/responses/UnauthorizedError'
        403:
          $ref: '#/responses/ForbiddenError'
        404:
          $ref: '#/responses/NotFoundUser'
    put:
      summary: Set modules access for a given user
      description: Sets modules access for a given user
      operationId: set_modules_access_v1
      consumes:
        - application/vnd.api+json
      parameters:
        - $ref: '#/parameters/UserId'
        - name: payload
          in: body
          schema:
            type: object
            required:
              - data
            properties:
              data:
                type: array
                items:
                  type: object
                  required:
                    - type
                    - id
                    - attributes
                  properties:
                    type:
                      type: string
                      description: Resource type
                      enum: [module/access]
                    id:
                      $ref: '#/definitions/ModuleId'
                    attributes:
                      type: object
                      required:
                        - access
                      properties:
                        access:
                          type: boolean
      responses:
        204:
          description: No Content
        401:
          $ref: '#/responses/UnauthorizedError'
        403:
          $ref: '#/responses/ForbiddenError'
        404:
          $ref: '#/responses/NotFoundUser'


parameters:
  Module:
    in: path
    name: module
    type: string
    enum:
      - analytics
      - piwik
      - consent_manager
      - tag_manager
      - administration
      - audience_manager
    required: true
  UserId:
    in: path
    name: user_id
    type: string
    format: uuid
    required: true
    description: UUIDv4 identifier of an object

definitions:
  Id:
    type: string
    format: uuid
    description: UUIDv4 identifier of an object
    example: 6edb1e3c-4c43-4760-ab76-682ad83146be
  ModuleId:
    type: string
    enum:
      - analytics
      - piwik
      - consent_manager
      - tag_manager
      - administration
      - audience_manager
    description: ID of a module
  UserIdentifier:
    type: object
    properties:
      type:
        description: Resource type
        type: string
        enum: [ppms/user]
      id:
        $ref: '#/definitions/Id'
  ModulesAccessForUser:
    type: object
    required:
      - id
      - type
      - attributes
    properties:
      id:
        $ref: '#/definitions/ModuleId'
      type:
        type: string
        description: Resource type
        enum: [module/access/user]
      attributes:
        type: object
        required:
          - group_access
          - access
        properties:
          group_access:
            type: object
            required:
              - group_names
              - access
            properties:
              group_names:
                type: array
                items:
                  type: string
                  example: Managers
              access:
                type: boolean
          access:
            type: boolean
  ErrorObject:
    type: object
    required:
      - status
      - title
    properties:
      status:
        type: string
        description: the HTTP status code applicable to this problem, expressed as a string value
        example: "400"
      code:
        type: string
        description: an application-specific error code, expressed as a string value
        example: error.default
      title:
        type: string
        description: >
          a short, human-readable summary of the problem that SHOULD NOT change from occurrence
          to occurrence of the problem, except for purposes of localization
        example: Invalid form
      detail:
        type: string
        description: >
          a human-readable explanation specific to this occurrence of the problem.
          Like `title`, this fieldâ€™s value can be localized
        example: This field is invalid
      source:
        type: object
        description: >
          an object containing references to the source of the error, optionally including any of the
          following members: [pointer, parameter]
        properties:
          pointer:
            type: string
            example: /data/attributes/name
            description: >
              a JSON Pointer [RFC6901] to the associated entity in the request document
              [e.g. "/data" for a primary data object, or "/data/attributes/name" for a specific attribute]
          parameter:
            type: string
            example: offset
            description: a string indicating which URI query parameter caused the error
responses:
  NotFoundModule:
    description: 'Not Found'
    schema:
      allOf:
        - $ref: '#/definitions/ErrorObject'
        - example:
            {
              "errors": [
              {
                "status": "404",
                "code": "module.not-exists",
                "title": "Module \"personalization\" does not exist"
              }
              ]
            }
  NotFoundUser:
    description: 'Not Found'
    schema:
      allOf:
        - $ref: '#/definitions/ErrorObject'
        - example:
            {
              "errors": [
              {
                "status": "404",
                "code": "users.error.user-does-not-exist",
                "title": "User \"704a6202-d899-4968-aba3-71758457bec1\" does not exist"
              }
              ]
            }
  UnauthorizedError:
    description: 'Unauthorized'
    schema:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          example: access token not authorized

  ForbiddenError:
    description: 'Forbidden'
    schema:
      allOf:
        - $ref: '#/definitions/ErrorObject'
        - example:
            {
              "errors": [
              {
                "status": "403",
                "code": "error.forbidden",
                "title": "Access denied."
              }
              ]
            }
